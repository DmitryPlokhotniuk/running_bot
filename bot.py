import asyncio
import logging
import datetime
from datetime import date, timedelta
import random

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN
from database import (
    init_user, add_run, get_user_stats, has_runs_this_week,
    get_week_range, users_db
)
from ranks import determine_rank, calculate_progress, CHALLENGES
from messages import (
    get_random_motivation, WELCOME_MESSAGE, HELP_MESSAGE,
    UNKNOWN_COMMAND_MESSAGE, RUN_SUCCESS_MESSAGE,
    RUN_SUCCESS_NEXT_RANK_MESSAGE, NO_STATS_MESSAGE,
    CHALLENGE_MESSAGE, WEEKLY_REPORT_MESSAGE
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    user_id = message.from_user.id
    init_user(user_id)
    
    welcome_text = WELCOME_MESSAGE.format(name=message.from_user.first_name)
    await message.answer(welcome_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /run
@dp.message(Command("run"))
async def cmd_run(message: Message) -> None:
    user_id = message.from_user.id
    
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é. –ù–∞–ø—Ä–∏–º–µ—Ä: /run 5.2")
        return
    
    try:
        distance = float(args[1].replace(',', '.'))
        if distance <= 0:
            await message.answer("‚ö†Ô∏è –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /run 5.2")
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    weekly_distance = add_run(user_id, distance)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
    rank = determine_rank(weekly_distance)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    response = RUN_SUCCESS_MESSAGE.format(
        distance=distance,
        weekly_distance=weekly_distance,
        rank=rank
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–Ω–≥—É
    current_rank, next_rank, km_needed = calculate_progress(weekly_distance)
    if next_rank:
        response += RUN_SUCCESS_NEXT_RANK_MESSAGE.format(
            next_rank=next_rank,
            km_needed=km_needed
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    motivational_msg = get_random_motivation()
    response += f"\nüí™ {motivational_msg}"
    
    await message.answer(response)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async def send_weekly_report(user_id: int) -> None:
    stats = get_user_stats(user_id)
    
    if not stats["weekly_runs"]:
        return
    
    weekly_distance = stats["weekly_distance"]
    rank = determine_rank(weekly_distance)
    
    start_date, end_date = get_week_range()
    start_date_str = start_date.strftime('%d.%m')
    end_date_str = end_date.strftime('%d.%m')
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    details = ""
    for run_date, distance in sorted(stats["weekly_runs"].items()):
        date_obj = datetime.date.fromisoformat(run_date)
        details += f"‚Ä¢ {date_obj.strftime('%d.%m')}: {distance:.1f} –∫–º\n"
    
    report = WEEKLY_REPORT_MESSAGE.format(
        start_date=start_date_str,
        end_date=end_date_str,
        weekly_distance=weekly_distance,
        rank=rank,
        details=details
    )
    
    try:
        await bot.send_message(user_id, report)
    except Exception as e:
        logging.error(f"Failed to send weekly report to user {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    user_id = message.from_user.id
    
    if not has_runs_this_week(user_id):
        await message.answer(NO_STATS_MESSAGE)
        return
    
    stats = get_user_stats(user_id)
    weekly_distance = stats["weekly_distance"]
    total_distance = stats["total_distance"]
    rank = determine_rank(weekly_distance)
    
    start_date, end_date = get_week_range()
    
    response = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–≥–∞:\n\n"
        f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è ({start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m')}):\n"
        f"üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–µ–∂–∞–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_distance:.1f} –∫–º\n"
        f"üèÖ –¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: {rank}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–Ω–≥—É
    current_rank, next_rank, km_needed = calculate_progress(weekly_distance)
    if next_rank:
        response += f"–î–æ —Ä–∞–Ω–≥–∞ \"{next_rank}\" –æ—Å—Ç–∞–ª–æ—Å—å: {km_needed:.1f} –∫–º\n\n"
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
    response += "–ü—Ä–æ–±–µ–∂–∫–∏ –ø–æ –¥–Ω—è–º:\n"
    for run_date, distance in sorted(stats["weekly_runs"].items()):
        date_obj = datetime.date.fromisoformat(run_date)
        response += f"‚Ä¢ {date_obj.strftime('%d.%m')}: {distance:.1f} –∫–º\n"
    
    response += f"\nüåü –í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–∞–Ω–æ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {total_distance:.1f} –∫–º"
    
    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /challenge - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
@dp.message(Command("challenge"))
async def cmd_challenge(message: Message) -> None:
    user_id = message.from_user.id
    init_user(user_id)
    
    stats = get_user_stats(user_id)
    weekly_distance = stats["weekly_distance"]
    rank = determine_rank(weekly_distance)
    
    user_challenges = CHALLENGES.get(rank, CHALLENGES["–ü–∞–¥—É–∞–Ω"])
    selected_challenge = random.choice(user_challenges)
    
    response = CHALLENGE_MESSAGE.format(
        rank=rank,
        challenge=selected_challenge
    )
    
    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message) -> None:
    await message.answer(HELP_MESSAGE)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: Message) -> None:
    await message.answer(UNKNOWN_COMMAND_MESSAGE)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main() -> None:
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ '–ë–µ–≥–æ–≤–∞—è –ò–º–ø–µ—Ä–∏—è'")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 